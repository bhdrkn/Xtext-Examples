/*
* generated by Xtext
*/
grammar InternalFouroperation;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.bhdrkn.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.bhdrkn.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.xtext.bhdrkn.services.FouroperationGrammarAccess;

}

@parser::members {

 	private FouroperationGrammarAccess grammarAccess;
 	
    public InternalFouroperationParser(TokenStream input, IAstFactory factory, FouroperationGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/xtext/bhdrkn/parser/antlr/internal/InternalFouroperation.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Operation";	
   	}
   	
   	@Override
   	protected FouroperationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationRule(), currentNode); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'operation' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getOperationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getStatementsStatementParserRuleCall_3_0(), currentNode); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getRGhtCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAdditionParserRuleCall_0(), currentNode); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getMinusParserRuleCall_1(), currentNode); 
    }
    this_Minus_1=ruleMinus
    { 
        $current = $this_Minus_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getMultiParserRuleCall_2(), currentNode); 
    }
    this_Multi_2=ruleMulti
    { 
        $current = $this_Multi_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getDivParserRuleCall_3(), currentNode); 
    }
    this_Div_3=ruleDiv
    { 
        $current = $this_Div_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditionRule(), currentNode); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_left_0_0=RULE_NUMBER
		{
			createLeafNode(grammarAccess.getAdditionAccess().getLeftNUMBERTerminalRuleCall_0_0(), "left"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_0_0, 
	        		"NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'+' 
    {
        createLeafNode(grammarAccess.getAdditionAccess().getPlusSGnKeyword_1(), null); 
    }
(
(
		lv_right_2_0=RULE_NUMBER
		{
			createLeafNode(grammarAccess.getAdditionAccess().getRightNUMBERTerminalRuleCall_2_0(), "right"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_2_0, 
	        		"NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleMinus
entryRuleMinus returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMinusRule(), currentNode); }
	 iv_ruleMinus=ruleMinus 
	 { $current=$iv_ruleMinus.current; } 
	 EOF 
;

// Rule Minus
ruleMinus returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_left_0_0=RULE_NUMBER
		{
			createLeafNode(grammarAccess.getMinusAccess().getLeftNUMBERTerminalRuleCall_0_0(), "left"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMinusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_0_0, 
	        		"NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'-' 
    {
        createLeafNode(grammarAccess.getMinusAccess().getHyphenMNusKeyword_1(), null); 
    }
(
(
		lv_right_2_0=RULE_NUMBER
		{
			createLeafNode(grammarAccess.getMinusAccess().getRightNUMBERTerminalRuleCall_2_0(), "right"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMinusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_2_0, 
	        		"NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleMulti
entryRuleMulti returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiRule(), currentNode); }
	 iv_ruleMulti=ruleMulti 
	 { $current=$iv_ruleMulti.current; } 
	 EOF 
;

// Rule Multi
ruleMulti returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_left_0_0=RULE_NUMBER
		{
			createLeafNode(grammarAccess.getMultiAccess().getLeftNUMBERTerminalRuleCall_0_0(), "left"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_0_0, 
	        		"NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'*' 
    {
        createLeafNode(grammarAccess.getMultiAccess().getAsterSkKeyword_1(), null); 
    }
(
(
		lv_right_2_0=RULE_NUMBER
		{
			createLeafNode(grammarAccess.getMultiAccess().getRightNUMBERTerminalRuleCall_2_0(), "right"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_2_0, 
	        		"NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDiv
entryRuleDiv returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDivRule(), currentNode); }
	 iv_ruleDiv=ruleDiv 
	 { $current=$iv_ruleDiv.current; } 
	 EOF 
;

// Rule Div
ruleDiv returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_left_0_0=RULE_NUMBER
		{
			createLeafNode(grammarAccess.getDivAccess().getLeftNUMBERTerminalRuleCall_0_0(), "left"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDivRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_0_0, 
	        		"NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'/' 
    {
        createLeafNode(grammarAccess.getDivAccess().getSolDusKeyword_1(), null); 
    }
(
(
		lv_right_2_0=RULE_NUMBER
		{
			createLeafNode(grammarAccess.getDivAccess().getRightNUMBERTerminalRuleCall_2_0(), "right"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDivRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_2_0, 
	        		"NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


