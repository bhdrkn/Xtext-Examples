/*
* generated by Xtext
*/
grammar InternalFunction;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.bhdrkn.function.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.bhdrkn.function.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.bhdrkn.function.services.FunctionGrammarAccess;

}

@parser::members {
 
 	private FunctionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(FunctionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleFUNCFile
entryRuleFUNCFile 
:
{ before(grammarAccess.getFUNCFileRule()); }
	 ruleFUNCFile
{ after(grammarAccess.getFUNCFileRule()); } 
	 EOF 
;

// Rule FUNCFile
ruleFUNCFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFUNCFileAccess().getGroup()); }
(rule__FUNCFile__Group__0)
{ after(grammarAccess.getFUNCFileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctions
entryRuleFunctions 
:
{ before(grammarAccess.getFunctionsRule()); }
	 ruleFunctions
{ after(grammarAccess.getFunctionsRule()); } 
	 EOF 
;

// Rule Functions
ruleFunctions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionsAccess().getGroup()); }
(rule__Functions__Group__0)
{ after(grammarAccess.getFunctionsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCalls
entryRuleCalls 
:
{ before(grammarAccess.getCallsRule()); }
	 ruleCalls
{ after(grammarAccess.getCallsRule()); } 
	 EOF 
;

// Rule Calls
ruleCalls
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallsAccess().getGroup()); }
(rule__Calls__Group__0)
{ after(grammarAccess.getCallsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FUNCFile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FUNCFile__Group__0__Impl
	rule__FUNCFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FUNCFile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFUNCFileAccess().getFunctionsAssignment_0()); }
(rule__FUNCFile__FunctionsAssignment_0)
{ after(grammarAccess.getFUNCFileAccess().getFunctionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FUNCFile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FUNCFile__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FUNCFile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFUNCFileAccess().getCallsAssignment_1()); }
(rule__FUNCFile__CallsAssignment_1)
{ after(grammarAccess.getFUNCFileAccess().getCallsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Functions__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Functions__Group__0__Impl
	rule__Functions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionsAccess().getFUNCTIONSKeyword_0()); }

	'[FUNCTIONS]' 

{ after(grammarAccess.getFunctionsAccess().getFUNCTIONSKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Functions__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Functions__Group__1__Impl
	rule__Functions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionsAccess().getFunctionsAssignment_1()); }
(rule__Functions__FunctionsAssignment_1)*
{ after(grammarAccess.getFunctionsAccess().getFunctionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Functions__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Functions__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionsAccess().getFUNCTIONSKeyword_2()); }

	'[/FUNCTIONS]' 

{ after(grammarAccess.getFunctionsAccess().getFUNCTIONSKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
(rule__Function__NameAssignment_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Calls__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Calls__Group__0__Impl
	rule__Calls__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calls__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallsAccess().getCALLSKeyword_0()); }

	'[CALLS]' 

{ after(grammarAccess.getCallsAccess().getCALLSKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Calls__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Calls__Group__1__Impl
	rule__Calls__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Calls__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallsAccess().getCallsAssignment_1()); }
(rule__Calls__CallsAssignment_1)*
{ after(grammarAccess.getCallsAccess().getCallsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Calls__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Calls__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calls__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallsAccess().getCALLSKeyword_2()); }

	'[/CALLS]' 

{ after(grammarAccess.getCallsAccess().getCALLSKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getCallKeyword_0()); }

	'call' 

{ after(grammarAccess.getCallAccess().getCallKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getNameAssignment_1()); }
(rule__Call__NameAssignment_1)
{ after(grammarAccess.getCallAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__FUNCFile__FunctionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFUNCFileAccess().getFunctionsFunctionsParserRuleCall_0_0()); }
	ruleFunctions{ after(grammarAccess.getFUNCFileAccess().getFunctionsFunctionsParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FUNCFile__CallsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFUNCFileAccess().getCallsCallsParserRuleCall_1_0()); }
	ruleCalls{ after(grammarAccess.getFUNCFileAccess().getCallsCallsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__FunctionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionsAccess().getFunctionsFunctionParserRuleCall_1_0()); }
	ruleFunction{ after(grammarAccess.getFunctionsAccess().getFunctionsFunctionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Calls__CallsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallsAccess().getCallsCallParserRuleCall_1_0()); }
	ruleCall{ after(grammarAccess.getCallsAccess().getCallsCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getNameFunctionCrossReference_1_0()); }
(
{ before(grammarAccess.getCallAccess().getNameFunctionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getCallAccess().getNameFunctionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getCallAccess().getNameFunctionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


