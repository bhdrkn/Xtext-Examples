/*
* generated by Xtext
*/
package org.xtext.bhdrkn.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.bhdrkn.services.FouroperationGrammarAccess;

public class FouroperationParser extends AbstractContentAssistParser {
	
	@Inject
	private FouroperationGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.bhdrkn.ui.contentassist.antlr.internal.InternalFouroperationParser createParser() {
		org.xtext.bhdrkn.ui.contentassist.antlr.internal.InternalFouroperationParser result = new org.xtext.bhdrkn.ui.contentassist.antlr.internal.InternalFouroperationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getMinusAccess().getGroup(), "rule__Minus__Group__0");
					put(grammarAccess.getMultiAccess().getGroup(), "rule__Multi__Group__0");
					put(grammarAccess.getDivAccess().getGroup(), "rule__Div__Group__0");
					put(grammarAccess.getOperationAccess().getNameAssignment_1(), "rule__Operation__NameAssignment_1");
					put(grammarAccess.getOperationAccess().getStatementsAssignment_3(), "rule__Operation__StatementsAssignment_3");
					put(grammarAccess.getStatementAccess().getExpressionAssignment(), "rule__Statement__ExpressionAssignment");
					put(grammarAccess.getAdditionAccess().getLeftAssignment_0(), "rule__Addition__LeftAssignment_0");
					put(grammarAccess.getAdditionAccess().getRightAssignment_2(), "rule__Addition__RightAssignment_2");
					put(grammarAccess.getMinusAccess().getLeftAssignment_0(), "rule__Minus__LeftAssignment_0");
					put(grammarAccess.getMinusAccess().getRightAssignment_2(), "rule__Minus__RightAssignment_2");
					put(grammarAccess.getMultiAccess().getLeftAssignment_0(), "rule__Multi__LeftAssignment_0");
					put(grammarAccess.getMultiAccess().getRightAssignment_2(), "rule__Multi__RightAssignment_2");
					put(grammarAccess.getDivAccess().getLeftAssignment_0(), "rule__Div__LeftAssignment_0");
					put(grammarAccess.getDivAccess().getRightAssignment_2(), "rule__Div__RightAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.bhdrkn.ui.contentassist.antlr.internal.InternalFouroperationParser typedParser = (org.xtext.bhdrkn.ui.contentassist.antlr.internal.InternalFouroperationParser) parser;
			typedParser.entryRuleOperation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FouroperationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FouroperationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
