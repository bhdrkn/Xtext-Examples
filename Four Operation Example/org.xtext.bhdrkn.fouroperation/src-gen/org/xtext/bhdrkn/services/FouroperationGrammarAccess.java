/*
* generated by Xtext
*/

package org.xtext.bhdrkn.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FouroperationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRGhtCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Operation:
		//	"operation" name=ID "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//"operation" name=ID "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }

		//"}"
		public Keyword getRGhtCurlyBracketKeyword_4() { return cRGhtCurlyBracketKeyword_4; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Statement:
		//	expression=Expression;
		public ParserRule getRule() { return rule; }

		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultiParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDivParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//	Addition | Minus | Multi | Div;
		public ParserRule getRule() { return rule; }

		//Addition | Minus | Multi | Div
		public Alternatives getAlternatives() { return cAlternatives; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//Minus
		public RuleCall getMinusParserRuleCall_1() { return cMinusParserRuleCall_1; }

		//Multi
		public RuleCall getMultiParserRuleCall_2() { return cMultiParserRuleCall_2; }

		//Div
		public RuleCall getDivParserRuleCall_3() { return cDivParserRuleCall_3; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNUMBERTerminalRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cPlusSGnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightNUMBERTerminalRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Addition:
		//	left=NUMBER "+" right=NUMBER;
		public ParserRule getRule() { return rule; }

		//left=NUMBER "+" right=NUMBER
		public Group getGroup() { return cGroup; }

		//left=NUMBER
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//NUMBER
		public RuleCall getLeftNUMBERTerminalRuleCall_0_0() { return cLeftNUMBERTerminalRuleCall_0_0; }

		//"+"
		public Keyword getPlusSGnKeyword_1() { return cPlusSGnKeyword_1; }

		//right=NUMBER
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//NUMBER
		public RuleCall getRightNUMBERTerminalRuleCall_2_0() { return cRightNUMBERTerminalRuleCall_2_0; }
	}

	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNUMBERTerminalRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMNusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightNUMBERTerminalRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Minus:
		//	left=NUMBER "-" right=NUMBER;
		public ParserRule getRule() { return rule; }

		//left=NUMBER "-" right=NUMBER
		public Group getGroup() { return cGroup; }

		//left=NUMBER
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//NUMBER
		public RuleCall getLeftNUMBERTerminalRuleCall_0_0() { return cLeftNUMBERTerminalRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMNusKeyword_1() { return cHyphenMNusKeyword_1; }

		//right=NUMBER
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//NUMBER
		public RuleCall getRightNUMBERTerminalRuleCall_2_0() { return cRightNUMBERTerminalRuleCall_2_0; }
	}

	public class MultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multi");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNUMBERTerminalRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cAsterSkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightNUMBERTerminalRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Multi:
		//	left=NUMBER "*" right=NUMBER;
		public ParserRule getRule() { return rule; }

		//left=NUMBER "*" right=NUMBER
		public Group getGroup() { return cGroup; }

		//left=NUMBER
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//NUMBER
		public RuleCall getLeftNUMBERTerminalRuleCall_0_0() { return cLeftNUMBERTerminalRuleCall_0_0; }

		//"*"
		public Keyword getAsterSkKeyword_1() { return cAsterSkKeyword_1; }

		//right=NUMBER
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//NUMBER
		public RuleCall getRightNUMBERTerminalRuleCall_2_0() { return cRightNUMBERTerminalRuleCall_2_0; }
	}

	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNUMBERTerminalRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cSolDusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightNUMBERTerminalRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Div:
		//	left=NUMBER "/" right=NUMBER;
		public ParserRule getRule() { return rule; }

		//left=NUMBER "/" right=NUMBER
		public Group getGroup() { return cGroup; }

		//left=NUMBER
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//NUMBER
		public RuleCall getLeftNUMBERTerminalRuleCall_0_0() { return cLeftNUMBERTerminalRuleCall_0_0; }

		//"/"
		public Keyword getSolDusKeyword_1() { return cSolDusKeyword_1; }

		//right=NUMBER
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//NUMBER
		public RuleCall getRightNUMBERTerminalRuleCall_2_0() { return cRightNUMBERTerminalRuleCall_2_0; }
	}
	
	
	private OperationElements pOperation;
	private StatementElements pStatement;
	private ExpressionElements pExpression;
	private AdditionElements pAddition;
	private MinusElements pMinus;
	private MultiElements pMulti;
	private DivElements pDiv;
	private TerminalRule tNUMBER;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FouroperationGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Operation:
	//	"operation" name=ID "{" statements+=Statement* "}";
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Statement:
	//	expression=Expression;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Expression:
	//	Addition | Minus | Multi | Div;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Addition:
	//	left=NUMBER "+" right=NUMBER;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Minus:
	//	left=NUMBER "-" right=NUMBER;
	public MinusElements getMinusAccess() {
		return (pMinus != null) ? pMinus : (pMinus = new MinusElements());
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}

	//Multi:
	//	left=NUMBER "*" right=NUMBER;
	public MultiElements getMultiAccess() {
		return (pMulti != null) ? pMulti : (pMulti = new MultiElements());
	}
	
	public ParserRule getMultiRule() {
		return getMultiAccess().getRule();
	}

	//Div:
	//	left=NUMBER "/" right=NUMBER;
	public DivElements getDivAccess() {
		return (pDiv != null) ? pDiv : (pDiv = new DivElements());
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}

	//terminal NUMBER returns ecore::EBigDecimal:
	//	"0".."9"* ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
