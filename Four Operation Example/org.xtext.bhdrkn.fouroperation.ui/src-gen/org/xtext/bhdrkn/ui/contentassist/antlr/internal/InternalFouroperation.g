/*
* generated by Xtext
*/
grammar InternalFouroperation;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.bhdrkn.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.bhdrkn.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.bhdrkn.services.FouroperationGrammarAccess;

}

@parser::members {
 
 	private FouroperationGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(FouroperationGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getGroup()); }
(rule__Operation__Group__0)
{ after(grammarAccess.getOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getExpressionAssignment()); }
(rule__Statement__ExpressionAssignment)
{ after(grammarAccess.getStatementAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinus
entryRuleMinus 
:
{ before(grammarAccess.getMinusRule()); }
	 ruleMinus
{ after(grammarAccess.getMinusRule()); } 
	 EOF 
;

// Rule Minus
ruleMinus
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMinusAccess().getGroup()); }
(rule__Minus__Group__0)
{ after(grammarAccess.getMinusAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMulti
entryRuleMulti 
:
{ before(grammarAccess.getMultiRule()); }
	 ruleMulti
{ after(grammarAccess.getMultiRule()); } 
	 EOF 
;

// Rule Multi
ruleMulti
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiAccess().getGroup()); }
(rule__Multi__Group__0)
{ after(grammarAccess.getMultiAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDiv
entryRuleDiv 
:
{ before(grammarAccess.getDivRule()); }
	 ruleDiv
{ after(grammarAccess.getDivRule()); } 
	 EOF 
;

// Rule Div
ruleDiv
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivAccess().getGroup()); }
(rule__Div__Group__0)
{ after(grammarAccess.getDivAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getExpressionAccess().getAdditionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getMinusParserRuleCall_1()); }
	ruleMinus
{ after(grammarAccess.getExpressionAccess().getMinusParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getMultiParserRuleCall_2()); }
	ruleMulti
{ after(grammarAccess.getExpressionAccess().getMultiParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getDivParserRuleCall_3()); }
	ruleDiv
{ after(grammarAccess.getExpressionAccess().getDivParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Operation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getOperationKeyword_0()); }

	'operation' 

{ after(grammarAccess.getOperationAccess().getOperationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameAssignment_1()); }
(rule__Operation__NameAssignment_1)
{ after(grammarAccess.getOperationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__2__Impl
	rule__Operation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__3__Impl
	rule__Operation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getStatementsAssignment_3()); }
(rule__Operation__StatementsAssignment_3)*
{ after(grammarAccess.getOperationAccess().getStatementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getRGhtCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getOperationAccess().getRGhtCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getLeftAssignment_0()); }
(rule__Addition__LeftAssignment_0)
{ after(grammarAccess.getAdditionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
	rule__Addition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSGnKeyword_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSGnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_2()); }
(rule__Addition__RightAssignment_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Minus__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Minus__Group__0__Impl
	rule__Minus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getLeftAssignment_0()); }
(rule__Minus__LeftAssignment_0)
{ after(grammarAccess.getMinusAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Minus__Group__1__Impl
	rule__Minus__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getHyphenMNusKeyword_1()); }

	'-' 

{ after(grammarAccess.getMinusAccess().getHyphenMNusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Minus__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getRightAssignment_2()); }
(rule__Minus__RightAssignment_2)
{ after(grammarAccess.getMinusAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multi__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__0__Impl
	rule__Multi__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getLeftAssignment_0()); }
(rule__Multi__LeftAssignment_0)
{ after(grammarAccess.getMultiAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multi__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__1__Impl
	rule__Multi__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getAsterSkKeyword_1()); }

	'*' 

{ after(grammarAccess.getMultiAccess().getAsterSkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multi__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getRightAssignment_2()); }
(rule__Multi__RightAssignment_2)
{ after(grammarAccess.getMultiAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Div__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Div__Group__0__Impl
	rule__Div__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivAccess().getLeftAssignment_0()); }
(rule__Div__LeftAssignment_0)
{ after(grammarAccess.getDivAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Div__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Div__Group__1__Impl
	rule__Div__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivAccess().getSolDusKeyword_1()); }

	'/' 

{ after(grammarAccess.getDivAccess().getSolDusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Div__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Div__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivAccess().getRightAssignment_2()); }
(rule__Div__RightAssignment_2)
{ after(grammarAccess.getDivAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Operation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__StatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getStatementsStatementParserRuleCall_3_0()); }
	ruleStatement{ after(grammarAccess.getOperationAccess().getStatementsStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_0()); }
	ruleExpression{ after(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getLeftNUMBERTerminalRuleCall_0_0()); }
	RULE_NUMBER{ after(grammarAccess.getAdditionAccess().getLeftNUMBERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightNUMBERTerminalRuleCall_2_0()); }
	RULE_NUMBER{ after(grammarAccess.getAdditionAccess().getRightNUMBERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getLeftNUMBERTerminalRuleCall_0_0()); }
	RULE_NUMBER{ after(grammarAccess.getMinusAccess().getLeftNUMBERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getRightNUMBERTerminalRuleCall_2_0()); }
	RULE_NUMBER{ after(grammarAccess.getMinusAccess().getRightNUMBERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getLeftNUMBERTerminalRuleCall_0_0()); }
	RULE_NUMBER{ after(grammarAccess.getMultiAccess().getLeftNUMBERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getRightNUMBERTerminalRuleCall_2_0()); }
	RULE_NUMBER{ after(grammarAccess.getMultiAccess().getRightNUMBERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Div__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivAccess().getLeftNUMBERTerminalRuleCall_0_0()); }
	RULE_NUMBER{ after(grammarAccess.getDivAccess().getLeftNUMBERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Div__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivAccess().getRightNUMBERTerminalRuleCall_2_0()); }
	RULE_NUMBER{ after(grammarAccess.getDivAccess().getRightNUMBERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


